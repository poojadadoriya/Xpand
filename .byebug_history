c
@user
c
 @user = User.create(email: "pd@yp.in", password: "pd@123", user_type: "expert")
c
@user = User.create(email: "pd@yp.in", password: "pd@123", user_type: "expert").errors
@user = User.create(email: "pd@yp.in", password: "pd@123", user_type: "expert")
c
@user.id
c
data["data"]["attributes"]["email"]
data = JSON.parse(response.body)
data
c
@user = User.create(email: "pd@yp.in", password: "pd@123", user_type: "expert")
@user.errors
@user
c
Contact.new.errors
Contact.new
c
object.picture.present?
c
update_params
c
@user = User.find_by(id: params[:id])
c
object.picture.present?
object
c
update_params
c
object
object.picture.present?
c
update_params
@user.present?
@user = User.find_by(id: params[:id])
c
object
c
object.picture.blob_id
object.picture.present?
c
@user.present?
@user.present
@user = User.find_by(reset_password_token: params[:token])
c
params[:email]
token = params[:token]
c
@user
@user = User.find_by(reset_password_token: params[:token])
c
token
params[:token]
@user = User.find_by(reset_password_token: params[:token])
c
params[:email]
token = params[:token]
c
@user
@user.present?
@user = User.find_by(reset_password_token: token)
c
params[:email]
token = params[:token].to_s
c
@user.present?
@user = User.find_by(reset_password_token: token)
c
token = params[:token]
c
@user.reset_password!(params[:password])
@user.reset_password!
@user.password_token_valid?
@user.present?
c
@user = User.find_by(reset_password_token: reset_password_token)     
@user = User.find_by(reset_password_token: token)     
=> 29:     
c
params[:email]
token = params[:token]
c
@user.present?
c
@user.reset_password!(params[:password])
@user.password_token_valid?
@user.present?
@user.present
 @user = User.find_by(reset_password_token: token)
c
token = params[:token]
c
@user.present?
@user.password_token_valid?
@user = User.find_by(reset_password_token: token)
c
token = params[:token]
c
@user.present?
@user.generate_password_token!
c
UserMailer.password_reset(user)
UserMailer
c
UserMailer.password_reset(user).deliver_now
@user.generate_password_token!
c
UserMailer.password_reset(user).deliver_now
UserMailer.password_reset(@user).deliver_now
serMailer.password_reset(@user).deliver_now
@user.generate_password_token!
c
@user.generate_password_token!
@user
c
token = params[:token]
c
@user.reset_password!(params[:password])
c
@user.reset_password!(params[:password])
@user.reset_password!
@user.password_token_valid?
@user.present?
@user = User.find_by(reset_password_token: token)
c
params[:email]
token = params[:token]
c
token = params[:token]
c
@user.password_token_valid?
@user.present?
@user = User.find_by(reset_password_token: token)
c
token = params[:token]
c
params[:email]
token = params[:token]
c
reset_password: token
@user = User.find_by(reset_password: token)
c
token = params[:token]
params[:email]
token = params[:token].to_s
c
user_params
c
response.body
c
response.body
response
c
(uid: payload['sub'])
uid: payload['sub']
token
payload
c
payload
token
c
token
payload
c
payload
token
c
token
payload
c
payload
token
c
token
payload
c
token
payload
payload.blank?
c
sign_up_params.merge(uid: payload['sub'])
sign_up_params.merge(uid: payload['sub']
user = User.create!(sign_up_params.merge(uid: payload['sub']))
payload
